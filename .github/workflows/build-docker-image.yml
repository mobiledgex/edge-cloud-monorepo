name: Build Docker Image
on:
  push:
    branches:
      - "!*"
    tags:
      - "*"
env:
  REGISTRY: harbor.mobiledgex.net

jobs:

  build-docker-image:
    name: Build the edge-cloud image
    runs-on: ubuntu-latest
    timeout-minutes: 60
    outputs:
      image: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
      edge-cloud-base-image: ${{ steps.edge-cloud-base-image.outputs.version }}
    env:
      ARTIFACTORY_PATH: https://artifactory.mobiledgex.net/artifactory/build-artifacts/swagger-spec
    steps:
      -
        name: Check out the monorepo
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.PAT }}
          submodules: recursive
          fetch-depth: 0
      -
        name: Fetch version from Makefile
        id: edge-cloud-base-image
        run: echo "::set-output name=version::$( grep '^EDGE_CLOUD_BASE_IMAGE *=' edge-cloud/Makefile | awk -F/ '{print $NF}' )"
      -
        name: Compute docker image meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ${{ env.REGISTRY }}/mobiledgex/edge-cloud
            ghcr.io/${{ github.repository_owner }}/edge-cloud
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=raw,value=nightly
      -
        name: Compute build tag
        id: build-tag
        run: echo "::set-output name=BUILD_TAG::$(git describe --always --dirty=+), $(TZ=UTC date +'%Y-%m-%d'), $(echo -e '${{steps.meta.outputs.tags}}' | head -n 1 | awk -F':' '{print $NF}')"
      -
        name: Set up builder username
        run: git config --global user.name github
      -
        name: Set up docker buildx
        uses: docker/setup-buildx-action@v1
        with:
          buildkitd-flags: --debug
          driver-opts: image=moby/buildkit:v0.9.1
          config-inline: |
            [worker.oci]
              max-parallelism = 4
      -
        name: Log in to registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      -
        name: Log in to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PAT }}
      -
        name: Set up .dockerignore
        run: cp edge-cloud/.dockerignore .
      -
        name: Build edge-cloud image
        uses: docker/build-push-action@v2
        id: build
        with:
          context: .
          file: ./edge-cloud/docker/Dockerfile.edge-cloud
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_TAG=${{ steps.build-tag.outputs.BUILD_TAG }}
            REGISTRY=${{ env.REGISTRY }}/mobiledgex
            EDGE_CLOUD_BASE_IMAGE=${{ env.REGISTRY }}/mobiledgex/${{ steps.edge-cloud-base-image.outputs.version }}
      -
        name: Upload swagger
        run: |
          IMAGE="${{ env.REGISTRY }}/mobiledgex/edge-cloud@${{ steps.build.outputs.digest }}"
          IMAGE_TAG=$( echo -e '${{steps.meta.outputs.tags}}' | head -n 1 | awk -F':' '{print $NF}' )
          for docs in internal external; do
            docker run --rm "$IMAGE" dump-docs "$docs" >"${docs}.json"
          done
          curl -sf -u "swagger-upload:${{ secrets.ARTIFACTORY_TOKEN }}" -XPUT -T internal.json "${{ env.ARTIFACTORY_PATH }}/${IMAGE_TAG}/apidocs.swagger.json"
          curl -sf -u "swagger-upload:${{ secrets.ARTIFACTORY_TOKEN }}" -XPUT -T external.json "${{ env.ARTIFACTORY_PATH }}/${IMAGE_TAG}/external/apidocs.swagger.json"

  component-containers:
    name: Build component-specific containers
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: build-docker-image
    strategy:
      matrix:
        component: [ alertmgr-sidecar, autoprov, cluster-svc, controller, crm, dme, edgeturn, frm, mc, notifyroot ]
    steps:
      -
        name: Checkout edge-cloud
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.PAT }}
          submodules: recursive
      -
        name: Extract image tag
        id: image-tag
        run: echo "::set-output name=tag::$( echo ${{ needs.build-docker-image.outputs.image }} | awk -F':' '{print $NF}' )"
      -
        name: Compute docker image meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ${{ env.REGISTRY }}/mobiledgex/edge-cloud-${{ matrix.component }}
            ghcr.io/${{ github.repository_owner }}/edge-cloud-${{ matrix.component }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=raw,value=nightly
      -
        name: Set up docker buildx
        uses: docker/setup-buildx-action@v1
        with:
          buildkitd-flags: --debug
          driver-opts: image=moby/buildkit:v0.9.1
          config-inline: |
            [worker.oci]
              max-parallelism = 4
      -
        name: Log in to registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      -
        name: Log in to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Build edge-cloud component image
        uses: docker/build-push-action@v2
        with:
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          context: ./edge-cloud/docker
          file: ./edge-cloud/docker/Dockerfile.${{ matrix.component }}
          build-args: |
            ALLINONE=${{ needs.build-docker-image.outputs.image }}
            EDGE_CLOUD_BASE_IMAGE=${{ env.REGISTRY }}/mobiledgex/${{ needs.build-docker-image.outputs.edge-cloud-base-image }}
